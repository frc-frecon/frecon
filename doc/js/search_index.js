var search_data = {"index":{"searchIndex":["bson","objectid","frecon","competition","competitionscontroller","configuration","configurationfile","console","controller","database","dumpcontroller","match","matchnumber","matchescontroller","model","participation","participationscontroller","position","record","recordscontroller","robot","robotscontroller","routes","scraper","server","team","teamscontroller","mongoid","criteria","object","requesterror","as_json()","attribute_routes()","competition()","competitions()","competitions()","construct!()","controller()","could_not_find()","create()","default()","delete()","demongoize()","demongoize()","descendants()","dump_compliant_name()","elimination?()","environment()","environment=()","evolve()","evolve()","final?()","find_model()","full()","get()","included()","index()","inherited()","is_blue?()","is_red?()","matches()","matches()","matches()","merge()","model()","model_name()","mongoize()","mongoize()","mongoize()","mongoize()","new()","new()","new()","new()","new()","new()","no_invalid_relations()","number()","participations()","participations()","practice?()","process_json_request()","psv_filter()","qualification?()","quarterfinal?()","read()","read()","records()","records()","records()","register_routable_attribute()","register_routable_relation()","relation_invalid()","replay?()","resource_routes()","robot()","robots()","robots()","run!()","semifinal?()","setup()","setup!()","show()","start()","start()","system()","team()","team()","teams()","teams()","that_has_number()","to_h()","to_s()","to_s()","update()","user()","was_blue?()","was_red?()","with_number()","readme"],"longSearchIndex":["bson","bson::objectid","frecon","frecon::competition","frecon::competitionscontroller","frecon::configuration","frecon::configurationfile","frecon::console","frecon::controller","frecon::database","frecon::dumpcontroller","frecon::match","frecon::matchnumber","frecon::matchescontroller","frecon::model","frecon::participation","frecon::participationscontroller","frecon::position","frecon::record","frecon::recordscontroller","frecon::robot","frecon::robotscontroller","frecon::routes","frecon::scraper","frecon::server","frecon::team","frecon::teamscontroller","mongoid","mongoid::criteria","object","requesterror","bson::objectid#as_json()","frecon::routes::attribute_routes()","frecon::record#competition()","frecon::robot#competitions()","frecon::team#competitions()","frecon::configuration::construct!()","frecon::model::controller()","frecon::controller::could_not_find()","frecon::controller::create()","frecon::configurationfile::default()","frecon::controller::delete()","frecon::matchnumber::demongoize()","frecon::position::demongoize()","frecon::model::descendants()","frecon::dumpcontroller::dump_compliant_name()","frecon::matchnumber#elimination?()","frecon::environment()","frecon::environment=()","frecon::matchnumber::evolve()","frecon::position::evolve()","frecon::matchnumber#final?()","frecon::controller::find_model()","frecon::dumpcontroller::full()","frecon::scraper#get()","frecon::routes::included()","frecon::controller::index()","frecon::model::inherited()","frecon::position#is_blue?()","frecon::position#is_red?()","frecon::participation#matches()","frecon::robot#matches()","frecon::team#matches()","frecon::configuration#merge()","frecon::controller::model()","frecon::controller::model_name()","frecon::matchnumber#mongoize()","frecon::matchnumber::mongoize()","frecon::position::mongoize()","frecon::position#mongoize()","frecon::configuration::new()","frecon::configurationfile::new()","frecon::matchnumber::new()","frecon::position::new()","frecon::scraper::new()","requesterror::new()","frecon::model#no_invalid_relations()","frecon::team::number()","frecon::match#participations()","frecon::team#participations()","frecon::matchnumber#practice?()","frecon::controller::process_json_request()","mongoid::criteria#psv_filter()","frecon::matchnumber#qualification?()","frecon::matchnumber#quarterfinal?()","frecon::configurationfile#read()","frecon::scraper#read()","frecon::competition#records()","frecon::robot#records()","frecon::team#records()","frecon::model::register_routable_attribute()","frecon::model::register_routable_relation()","frecon::model#relation_invalid()","frecon::matchnumber#replay?()","frecon::routes::resource_routes()","frecon::record#robot()","frecon::competition#robots()","frecon::match#robots()","frecon::server::run!()","frecon::matchnumber#semifinal?()","frecon::database::setup()","frecon::server::setup!()","frecon::controller::show()","frecon::console::start()","frecon::server::start()","frecon::configurationfile::system()","frecon::participation#team()","frecon::record#team()","frecon::competition#teams()","frecon::match#teams()","frecon::team::that_has_number()","frecon::configuration#to_h()","frecon::matchnumber#to_s()","frecon::position#to_s()","frecon::controller::update()","frecon::configurationfile::user()","frecon::position#was_blue?()","frecon::position#was_red?()","frecon::team::with_number()",""],"info":[["BSON","","BSON.html","","<p>lib/frecon/base/bson.rb\n<p>Copyright (C) 2014 Christopher Cooper, Sam Craig, Tiger Huang, Vincent Mai,\nSam …\n"],["BSON::ObjectId","","BSON/ObjectId.html","",""],["FReCon","","FReCon.html","","<p>lib/frecon/base/variables.rb\n<p>Copyright (C) 2014 Christopher Cooper, Sam Craig, Tiger Huang, Vincent Mai\n…\n"],["FReCon::Competition","","FReCon/Competition.html","",""],["FReCon::CompetitionsController","","FReCon/CompetitionsController.html","",""],["FReCon::Configuration","","FReCon/Configuration.html","",""],["FReCon::ConfigurationFile","","FReCon/ConfigurationFile.html","",""],["FReCon::Console","","FReCon/Console.html","",""],["FReCon::Controller","","FReCon/Controller.html","",""],["FReCon::Database","","FReCon/Database.html","",""],["FReCon::DumpController","","FReCon/DumpController.html","",""],["FReCon::Match","","FReCon/Match.html","",""],["FReCon::MatchNumber","","FReCon/MatchNumber.html","",""],["FReCon::MatchesController","","FReCon/MatchesController.html","",""],["FReCon::Model","","FReCon/Model.html","",""],["FReCon::Participation","","FReCon/Participation.html","",""],["FReCon::ParticipationsController","","FReCon/ParticipationsController.html","",""],["FReCon::Position","","FReCon/Position.html","",""],["FReCon::Record","","FReCon/Record.html","",""],["FReCon::RecordsController","","FReCon/RecordsController.html","",""],["FReCon::Robot","","FReCon/Robot.html","",""],["FReCon::RobotsController","","FReCon/RobotsController.html","",""],["FReCon::Routes","","FReCon/Routes.html","",""],["FReCon::Scraper","","FReCon/Scraper.html","","<p>The default scraper scrapes other FReCon instances. To scrape a different\nsource, a descendant scraper …\n"],["FReCon::Server","","FReCon/Server.html","",""],["FReCon::Team","","FReCon/Team.html","",""],["FReCon::TeamsController","","FReCon/TeamsController.html","",""],["Mongoid","","Mongoid.html","",""],["Mongoid::Criteria","","Mongoid/Criteria.html","",""],["Object","","Object.html","","<p>lib/frecon/base/object.rb\n<p>Copyright (C) 2014 Christopher Cooper, Sam Craig, Tiger Huang, Vincent Mai,\n…\n"],["RequestError","","RequestError.html","",""],["as_json","BSON::ObjectId","BSON/ObjectId.html#method-i-as_json","(*args)",""],["attribute_routes","FReCon::Routes","FReCon/Routes.html#method-c-attribute_routes","(base, name, controller)",""],["competition","FReCon::Record","FReCon/Record.html#method-i-competition","()",""],["competitions","FReCon::Robot","FReCon/Robot.html#method-i-competitions","()",""],["competitions","FReCon::Team","FReCon/Team.html#method-i-competitions","()",""],["construct!","FReCon::Configuration","FReCon/Configuration.html#method-c-construct-21","(default_configuration: ConfigurationFile.default.read, system_configuration: ConfigurationFile.system.read, user_configuration: ConfigurationFile.user.read, argument_configuration: nil)",""],["controller","FReCon::Model","FReCon/Model.html#method-c-controller","()",""],["could_not_find","FReCon::Controller","FReCon/Controller.html#method-c-could_not_find","(value, attribute = \"id\", model = model_name.downcase)","<p>The 404 error message.\n"],["create","FReCon::Controller","FReCon/Controller.html#method-c-create","(request, params, post_data = nil)",""],["default","FReCon::ConfigurationFile","FReCon/ConfigurationFile.html#method-c-default","()",""],["delete","FReCon::Controller","FReCon/Controller.html#method-c-delete","(params)",""],["demongoize","FReCon::MatchNumber","FReCon/MatchNumber.html#method-c-demongoize","(object)","<p>MongoDB compatibility methods.\n"],["demongoize","FReCon::Position","FReCon/Position.html#method-c-demongoize","(object)","<p>MongoDB compatibility methods.\n"],["descendants","FReCon::Model","FReCon/Model.html#method-c-descendants","()",""],["dump_compliant_name","FReCon::DumpController","FReCon/DumpController.html#method-c-dump_compliant_name","(model)",""],["elimination?","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-elimination-3F","()",""],["environment","FReCon","FReCon.html#method-c-environment","()",""],["environment=","FReCon","FReCon.html#method-c-environment-3D","(arg)",""],["evolve","FReCon::MatchNumber","FReCon/MatchNumber.html#method-c-evolve","(object)",""],["evolve","FReCon::Position","FReCon/Position.html#method-c-evolve","(object)","<p>Used for queries.\n"],["final?","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-final-3F","()",""],["find_model","FReCon::Controller","FReCon/Controller.html#method-c-find_model","(params)","<p>Some models have to find themselves in special ways, so this can be\noverridden with those ways.\n"],["full","FReCon::DumpController","FReCon/DumpController.html#method-c-full","(params)",""],["get","FReCon::Scraper","FReCon/Scraper.html#method-i-get","(model = nil, query = {})","<p>If no arguments are passed, will import the whole other database. If only\none argument is passed, will …\n"],["included","FReCon::Routes","FReCon/Routes.html#method-c-included","(base)",""],["index","FReCon::Controller","FReCon/Controller.html#method-c-index","(params)",""],["inherited","FReCon::Model","FReCon/Model.html#method-c-inherited","(child)",""],["is_blue?","FReCon::Position","FReCon/Position.html#method-i-is_blue-3F","()",""],["is_red?","FReCon::Position","FReCon/Position.html#method-i-is_red-3F","()",""],["matches","FReCon::Participation","FReCon/Participation.html#method-i-matches","()",""],["matches","FReCon::Robot","FReCon/Robot.html#method-i-matches","()",""],["matches","FReCon::Team","FReCon/Team.html#method-i-matches","()",""],["merge","FReCon::Configuration","FReCon/Configuration.html#method-i-merge","(other)",""],["model","FReCon::Controller","FReCon/Controller.html#method-c-model","()",""],["model_name","FReCon::Controller","FReCon/Controller.html#method-c-model_name","()",""],["mongoize","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-mongoize","()",""],["mongoize","FReCon::MatchNumber","FReCon/MatchNumber.html#method-c-mongoize","(object)",""],["mongoize","FReCon::Position","FReCon/Position.html#method-c-mongoize","(object)","<p>Allows passing a String or Hash instead of a Position. i.e. record.position\n= “r3”\n"],["mongoize","FReCon::Position","FReCon/Position.html#method-i-mongoize","()",""],["new","FReCon::Configuration","FReCon/Configuration.html#method-c-new","(data)",""],["new","FReCon::ConfigurationFile","FReCon/ConfigurationFile.html#method-c-new","(filename)",""],["new","FReCon::MatchNumber","FReCon/MatchNumber.html#method-c-new","(args)",""],["new","FReCon::Position","FReCon/Position.html#method-c-new","(*args)",""],["new","FReCon::Scraper","FReCon/Scraper.html#method-c-new","(base_uri)",""],["new","RequestError","RequestError.html#method-c-new","(code, message = nil, context = nil)",""],["no_invalid_relations","FReCon::Model","FReCon/Model.html#method-i-no_invalid_relations","()",""],["number","FReCon::Team","FReCon/Team.html#method-c-number","(team_number)",""],["participations","FReCon::Match","FReCon/Match.html#method-i-participations","()",""],["participations","FReCon::Team","FReCon/Team.html#method-i-participations","()",""],["practice?","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-practice-3F","()",""],["process_json_request","FReCon::Controller","FReCon/Controller.html#method-c-process_json_request","(request)",""],["psv_filter","Mongoid::Criteria","Mongoid/Criteria.html#method-i-psv_filter","(psv_parameters = {})",""],["qualification?","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-qualification-3F","()",""],["quarterfinal?","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-quarterfinal-3F","()",""],["read","FReCon::ConfigurationFile","FReCon/ConfigurationFile.html#method-i-read","()",""],["read","FReCon::Scraper","FReCon/Scraper.html#method-i-read","(data, context = {})","<p>Reads and imports a data string. Determines what to do with information in\nthe `context` hash.\n"],["records","FReCon::Competition","FReCon/Competition.html#method-i-records","()",""],["records","FReCon::Robot","FReCon/Robot.html#method-i-records","()",""],["records","FReCon::Team","FReCon/Team.html#method-i-records","()",""],["register_routable_attribute","FReCon::Model","FReCon/Model.html#method-c-register_routable_attribute","(method, attribute)",""],["register_routable_relation","FReCon::Model","FReCon/Model.html#method-c-register_routable_relation","(method, attribute)",""],["relation_invalid","FReCon::Model","FReCon/Model.html#method-i-relation_invalid","(class_constant, id)",""],["replay?","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-replay-3F","()",""],["resource_routes","FReCon::Routes","FReCon/Routes.html#method-c-resource_routes","(base, name, controller)",""],["robot","FReCon::Record","FReCon/Record.html#method-i-robot","()",""],["robots","FReCon::Competition","FReCon/Competition.html#method-i-robots","()",""],["robots","FReCon::Match","FReCon/Match.html#method-i-robots","()",""],["run!","FReCon::Server","FReCon/Server.html#method-c-run-21","(**keyword_arguments)",""],["semifinal?","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-semifinal-3F","()",""],["setup","FReCon::Database","FReCon/Database.html#method-c-setup","(environment: FReCon.environment, mongoid: nil)",""],["setup!","FReCon::Server","FReCon/Server.html#method-c-setup-21","(configuration: Configuration.construct!)",""],["show","FReCon::Controller","FReCon/Controller.html#method-c-show","(params)",""],["start","FReCon::Console","FReCon/Console.html#method-c-start","(configuration: Configuration.construct!)",""],["start","FReCon::Server","FReCon/Server.html#method-c-start","(**keyword_arguments)",""],["system","FReCon::ConfigurationFile","FReCon/ConfigurationFile.html#method-c-system","()",""],["team","FReCon::Participation","FReCon/Participation.html#method-i-team","()",""],["team","FReCon::Record","FReCon/Record.html#method-i-team","()",""],["teams","FReCon::Competition","FReCon/Competition.html#method-i-teams","()",""],["teams","FReCon::Match","FReCon/Match.html#method-i-teams","()",""],["that_has_number","FReCon::Team","FReCon/Team.html#method-c-that_has_number","(team_number)",""],["to_h","FReCon::Configuration","FReCon/Configuration.html#method-i-to_h","()",""],["to_s","FReCon::MatchNumber","FReCon/MatchNumber.html#method-i-to_s","()",""],["to_s","FReCon::Position","FReCon/Position.html#method-i-to_s","()",""],["update","FReCon::Controller","FReCon/Controller.html#method-c-update","(request, params, post_data = nil)",""],["user","FReCon::ConfigurationFile","FReCon/ConfigurationFile.html#method-c-user","()",""],["was_blue?","FReCon::Position","FReCon/Position.html#method-i-was_blue-3F","()",""],["was_red?","FReCon::Position","FReCon/Position.html#method-i-was_red-3F","()",""],["with_number","FReCon::Team","FReCon/Team.html#method-c-with_number","(team_number)",""],["README","","README_md.html","","<p>FReCon\n<p>FReCon is an API for scouting at <em>FIRST</em> Robotics competitions.\nIt\nis designed to be game-agnostic, ...\n"]]}}