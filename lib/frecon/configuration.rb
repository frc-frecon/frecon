# lib/frecon/configuration.rb
#
# Copyright (C) 2015 Christopher Cooper, Sam Craig, Tiger Huang, Vincent Mai, Sam Mercier, and Kristofer Rye
#
# This file is part of FReCon, an API for scouting at FRC Competitions, which is
# licensed under the MIT license.  You should have received a copy of the MIT
# license with this program.  If not, please see
# <http://opensource.org/licenses/MIT>.

require "frecon/configuration_file"

module FReCon
	# Public: A wrapper to allow the manipulation of configurations.
	class Configuration < Hash
		# Public: Initialize a Configuration.
		#
		# data - a Hash representing the data.
		def initialize(data)
			data.each do |key, value|
				self[key] = value
			end
		end

		# Public: Convert self to a Hash.
		#
		# Recursively converts instances of Configuration within self
		# to hashes by calling this method.
		#
		# Returns a Hash representing self.
		def to_h
			hash = {}

			self.each do |key, value|
				case value
				when Configuration
					hash[key] = value.to_h
				else
					hash[key] = value
				end
			end

			hash
		end

		# Public: Merge with another Configuration.
		#
		# Sets all key-value pairs within Configuration to the same within self.
		#
		# other - A Configuration or Hash to be merged with.
		def merge(other)
			case other
			when Configuration, Hash
				other.each do |key, value|
					case value
					when Configuration, Hash
						me = Configuration.new(self[key] || {})
						me.merge(Configuration.new(value))
						self[key] = me
					else
						self[key] = value
					end
				end
			when nil
			end
		end

		# Public: Constructs a configuration.
		#
		# options - A Hash containing various configurations.
		#           :default_configuration  - The default configuration's values
		#           :system_configuration   - The system's configuration's values
		#           :user_configuration     - The user's configuration's values
		#           :argument_configuration - The configuration values from command-line arguments
		#
		# Returns a Configuration generated by merging all of the given
		# configurations together.
		def self.construct!(default_configuration: ConfigurationFile.default.read,
		                    system_configuration: ConfigurationFile.system.read,
		                    user_configuration: ConfigurationFile.user.read,
		                    argument_configuration: nil)
			configuration_hierarchy = [default_configuration, system_configuration, user_configuration, argument_configuration]

			configuration = Configuration.new({})
			configuration_hierarchy.each do |other_configuration|
				configuration.merge(other_configuration)
			end

			configuration
		end
	end
end
